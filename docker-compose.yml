version: '2.3'

networks:
  local_net:

services:

  # this container just git clone jeedom repo into host directory
  installing:
      container_name: installing
      build: ./app
      environment:
        - TZ=Europe/Paris
      volumes:
        - ./jeedom:/app
          
  jeedom:
      container_name: jeedom
      build: ./php
      privileged: false
      pid: "host"
      cap_add:
           - SYS_PTRACE
      # tty: true
      hostname: jeedom
      environment:
        - TZ=Europe/Paris
      # devices:
      #     - "/dev/ttyUSB0"
      #     - "/dev/ttyUSB1"
      #     - "/dev/ttyACM0"
      restart: unless-stopped
      volumes:
        - ./jeedom:/var/www/html
        - ./backup:/var/www/html/backup
      depends_on:
        - installing
      healthcheck:
        test: ["CMD-SHELL", "curl -so /dev/null http://localhost/here.html || exit 1"]
        interval: 1m30s
        retries: 3
        start_period: 40s
        timeout: 20s
      networks:
        - local_net
      ports:
        - 8084:80
      labels:
        - "traefik.http.routers.jeedom.rule=Host(`home.nico.si`)"
        - "traefik.http.services.jeedom.loadbalancer.server.port=8084"


  # Scheduler Service
  scheduler:
    image: mcuadros/ofelia:latest
    container_name: ofelia
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./ofelia.ini:/etc/ofelia/config.ini
    depends_on:
      - jeedom
    environment:
      - TZ=Europe/Paris


  db:
    container_name: db
    image: ghcr.io/linuxserver/mariadb
    restart: unless-stopped
        # env_file:
        #     - ./.env
    environment:
      - PUID=1000
      - PGID=1000
      - MYSQL_ROOT_PASSWORD=admin
      - TZ=Europe/Paris
      - MYSQL_ALLOW_EMPTY_PASSWORD=yes
      - MYSQL_DATABASE=jeedom #optional
      - MYSQL_USER=jeedom #optional
      - MYSQL_PASSWORD=jeedom #optional
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      interval: 1m30s
      retries: 3
      start_period: 40s
      timeout: 20s
        # - REMOTE_SQL=http://URL1/your.sql,https://URL2/your.sql #optional
    volumes:
      - ./db:/config
      - /etc/timezone:/etc/timezone:ro
    ports:
      - 3306:3306
    networks:
      - local_net


  adminer:
    container_name: adminer
    image: adminer
    ports:
      - "8081:8080"
    labels:
      - "traefik.http.routers.adminer.rule=Host(`db.nico.si`)"
      - "traefik.http.services.adminer.loadbalancer.server.port=8081"
    networks:
      - local_net


  portainer:
    container_name: portainer
    image: portainer/portainer-ce
    privileged: true
    environment:
      - TZ=Europe/Paris
    ports:
      - 8083:8000
      - 9000:9000
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./portainer:/data
    networks:
      - local_net
    labels:
      - "traefik.http.routers.portainer.rule=Host(`portainer.nico.si`)"
      - "traefik.http.services.portainer.loadbalancer.server.port=8083"
      # - "traefik.http.routers.portadm.rule=Host(`portadm.nico.si`)"
      # - "traefik.http.services.portadm.loadbalancer.server.port=9000"


  homebridge:
    image: oznu/homebridge:latest
    container_name: homebridge
    restart: unless-stopped
    # network_mode: host
    environment:
      - TZ=Europe/Paris
      - PGID=1000
      - PUID=1000
      - HOMEBRIDGE_CONFIG_UI=1
      - HOMEBRIDGE_CONFIG_UI_PORT=8082
    ports:
      - 8082:8082
    volumes:
      - ./homebridge:/homebridge
    labels:
      - "traefik.http.routers.homebridge.rule=Host(`homebridge.nico.si`)"
      - "traefik.http.services.homebridge.loadbalancer.server.port=8082"
    networks:
      - local_net


  whoami:
    # A container that exposes an API to show its IP address
    image: containous/whoami
    container_name: whoami
    labels:
      - "traefik.http.routers.whoami.rule=Host(`whoami.nico.si`)"
    networks:
      - local_net


  reverse-proxy:
    # The official v2 Traefik docker image
    image: traefik:v2.4
    container_name: traefik
    # Enables the web UI and tells Traefik to listen to docker
    command: --api.insecure=true --providers.docker
    environment:
      - TZ=Europe/Paris
    ports:
      # The HTTP port
      - 80:80
      # The Web UI (enabled by --api.insecure=true)
      - 8080:8080
      # https port
      - 443:443
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - local_net
